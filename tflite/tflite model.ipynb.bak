{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9a04a5a9",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-04-30 01:42:00.816441: I tensorflow/tsl/cuda/cudart_stub.cc:28] Could not find cuda drivers on your machine, GPU will not be used.\n",
      "2023-04-30 01:42:00.845389: I tensorflow/tsl/cuda/cudart_stub.cc:28] Could not find cuda drivers on your machine, GPU will not be used.\n",
      "2023-04-30 01:42:00.846117: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.\n",
      "To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.\n",
      "2023-04-30 01:42:01.382363: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "from tensorflow.keras import layers\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "%matplotlib inline \n",
    "import matplotlib.pyplot as plt\n",
    "%config InlineBackend.figure_format='retina'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ab0672f8",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "525\n",
      "150\n",
      "75\n"
     ]
    }
   ],
   "source": [
    "from random import shuffle\n",
    "classes = {\"BLE\": 0, \"Zigbee\": 1, \"Noise\": 2}\n",
    "\n",
    "# rounds int x to nearest multiple of int y\n",
    "def roundToNearest(x, y):\n",
    "    return int((x // y) * y)\n",
    "\n",
    "class Generator(keras.utils.Sequence):\n",
    "    def __init__(self, csv_file_path, batch_size, low, high):\n",
    "        df = pd.read_csv(csv_file_path, header=None)\n",
    "        # split data\n",
    "        lowerIdx = roundToNearest(int(len(df)*low), batch_size)\n",
    "        upperIdx = roundToNearest(int(len(df)*high), batch_size)\n",
    "        df = df.iloc[lowerIdx:upperIdx]\n",
    "        # organize data\n",
    "        data = np.asarray(df.iloc[:, 5:-1], dtype=np.float32)\n",
    "        samples = len(data[0])\n",
    "        self.data = data.reshape(-1, 2, samples)\n",
    "        self.labels = np.asarray(df.iloc[range(0, len(df), 2), 4])\n",
    "        self.modes = np.asarray(df.iloc[range(0, len(df), 2), 2], dtype=np.int8)\n",
    "        self.SNRs = np.asarray(df.iloc[range(0, len(df), 2), 1])\n",
    "        # shuffle data points\n",
    "        rand_map = list(range(len(self.data)))\n",
    "        shuffle(rand_map)\n",
    "        # batch data\n",
    "        self.data = self.data[rand_map].reshape(-1, batch_size, 2, samples)\n",
    "        self.labels = self.labels[rand_map].reshape(-1, batch_size)\n",
    "        self.modes = self.modes[rand_map].reshape(-1, batch_size)\n",
    "        self.SNRs = self.SNRs[rand_map].reshape(-1, batch_size)\n",
    "           \n",
    "    def __len__(self):\n",
    "        return len(self.data)\n",
    "    \n",
    "    def __getitem__(self, idx):\n",
    "        result = self.data[idx]\n",
    "        label = [classes[label.strip()] for label in self.labels[idx]]\n",
    "        return result, label\n",
    "\n",
    "batch_size = 64\n",
    "train_gen = Generator(\"../data/data_iq.csv\", batch_size, 0, 0.7)\n",
    "val_gen = Generator(\"../data/data_iq.csv\", batch_size, 0.7, 0.9)\n",
    "test_gen = Generator(\"../data/data_iq.csv\", batch_size, 0.9, 1.0)\n",
    "print(len(train_gen))\n",
    "print(len(val_gen))\n",
    "print(len(test_gen))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "77acf891",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(525, 64, 2, 32)\n"
     ]
    }
   ],
   "source": [
    "print(train_gen.data.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "718462e5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7ff528ad81f0>]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 413,
       "width": 559
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x, y = train_gen[0]\n",
    "plt.plot(x[0][0])\n",
    "plt.plot(x[0][1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "856cc647",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " input_1 (InputLayer)        [(None, 2, None)]         0         \n",
      "                                                                 \n",
      " tf.expand_dims (TFOpLambda)  (None, 2, None, 1)       0         \n",
      "                                                                 \n",
      " conv2d (Conv2D)             (None, 2, None, 16)       80        \n",
      "                                                                 \n",
      " dropout (Dropout)           (None, 2, None, 16)       0         \n",
      "                                                                 \n",
      " batch_normalization (BatchN  (None, 2, None, 16)      64        \n",
      " ormalization)                                                   \n",
      "                                                                 \n",
      " conv2d_1 (Conv2D)           (None, 2, None, 64)       4160      \n",
      "                                                                 \n",
      " dropout_1 (Dropout)         (None, 2, None, 64)       0         \n",
      "                                                                 \n",
      " batch_normalization_1 (Batc  (None, 2, None, 64)      256       \n",
      " hNormalization)                                                 \n",
      "                                                                 \n",
      " conv2d_2 (Conv2D)           (None, 1, None, 128)      65664     \n",
      "                                                                 \n",
      " dropout_2 (Dropout)         (None, 1, None, 128)      0         \n",
      "                                                                 \n",
      " batch_normalization_2 (Batc  (None, 1, None, 128)     512       \n",
      " hNormalization)                                                 \n",
      "                                                                 \n",
      " conv2d_3 (Conv2D)           (None, 1, None, 64)       8256      \n",
      "                                                                 \n",
      " dropout_3 (Dropout)         (None, 1, None, 64)       0         \n",
      "                                                                 \n",
      " conv2d_4 (Conv2D)           (None, 1, None, 3)        195       \n",
      "                                                                 \n",
      " global_average_pooling2d (G  (None, 3)                0         \n",
      " lobalAveragePooling2D)                                          \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 79,187\n",
      "Trainable params: 78,771\n",
      "Non-trainable params: 416\n",
      "_________________________________________________________________\n",
      "None\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-04-30 01:42:09.620405: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:982] could not open file to read NUMA node: /sys/bus/pci/devices/0000:02:00.0/numa_node\n",
      "Your kernel may have been built without NUMA support.\n",
      "2023-04-30 01:42:09.817066: W tensorflow/core/common_runtime/gpu/gpu_device.cc:1956] Cannot dlopen some GPU libraries. Please make sure the missing libraries mentioned above are installed properly if you would like to use GPU. Follow the guide at https://www.tensorflow.org/install/gpu for how to download and setup the required libraries for your platform.\n",
      "Skipping registering GPU devices...\n"
     ]
    }
   ],
   "source": [
    "def FCN_model():\n",
    "    inputs = layers.Input(shape=(2, None))\n",
    "    \n",
    "    # add channel dimension\n",
    "    x = tf.expand_dims(inputs, axis=-1)\n",
    "    \n",
    "    # conv layers\n",
    "    x = layers.Conv2D(filters=16, kernel_size=(1, 4), strides=1, padding=\"same\", activation=\"relu\")(x)\n",
    "    x = layers.Dropout(0.2)(x)\n",
    "    x = layers.BatchNormalization()(x) # TODO: try different axis?\n",
    "    \n",
    "    x = layers.Conv2D(filters=64, kernel_size=(1, 4), strides=1, padding=\"same\", activation=\"relu\")(x)\n",
    "    x = layers.Dropout(0.2)(x)\n",
    "    x = layers.BatchNormalization()(x)\n",
    "    \n",
    "    x = layers.Conv2D(filters=128, kernel_size=(2, 4), strides=1, activation=\"relu\")(x)\n",
    "    x = layers.Dropout(0.2)(x)\n",
    "    x = layers.BatchNormalization()(x)\n",
    "    \n",
    "    # \"fully connected\" layers\n",
    "    x = layers.Conv2D(filters=64, kernel_size=1, strides=1, activation=\"relu\")(x)\n",
    "    x = layers.Dropout(0.5)(x) # TODO: add batch norm?\n",
    "    \n",
    "    x = layers.Conv2D(filters=3, kernel_size=1, strides=1, activation=None)(x)\n",
    "    pred = layers.GlobalAveragePooling2D()(x) # TODO: add dropout and batch norm?\n",
    "    \n",
    "    model = keras.Model(inputs=inputs, outputs=pred)\n",
    "    print(model.summary())\n",
    "    return model\n",
    "\n",
    "model = FCN_model()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "25ba468a",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2023-04-30 01:55:03.791498: I tensorflow/core/common_runtime/executor.cc:1197] [/device:CPU:0] (DEBUG INFO) Executor start aborting (this does not indicate an error and you can ignore this message): INVALID_ARGUMENT: You must feed a value for placeholder tensor 'Placeholder/_0' with dtype int32\n",
      "\t [[{{node Placeholder/_0}}]]\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "in user code:\n\n    File \"/home/eminarslan/Developer/CS-342-Neural-Networks/venv/lib/python3.8/site-packages/keras/engine/training.py\", line 1284, in train_function  *\n        return step_function(self, iterator)\n    File \"/home/eminarslan/Developer/CS-342-Neural-Networks/venv/lib/python3.8/site-packages/keras/engine/training.py\", line 1268, in step_function  **\n        outputs = model.distribute_strategy.run(run_step, args=(data,))\n    File \"/home/eminarslan/Developer/CS-342-Neural-Networks/venv/lib/python3.8/site-packages/keras/engine/training.py\", line 1249, in run_step  **\n        outputs = model.train_step(data)\n    File \"/home/eminarslan/Developer/CS-342-Neural-Networks/venv/lib/python3.8/site-packages/keras/engine/training.py\", line 1051, in train_step\n        loss = self.compute_loss(x, y, y_pred, sample_weight)\n    File \"/home/eminarslan/Developer/CS-342-Neural-Networks/venv/lib/python3.8/site-packages/keras/engine/training.py\", line 1109, in compute_loss\n        return self.compiled_loss(\n    File \"/home/eminarslan/Developer/CS-342-Neural-Networks/venv/lib/python3.8/site-packages/keras/engine/compile_utils.py\", line 279, in __call__\n        batch_dim = tf.shape(y_t)[0]\n\n    ValueError: slice index 0 of dimension 0 out of bounds. for '{{node strided_slice}} = StridedSlice[Index=DT_INT32, T=DT_INT32, begin_mask=0, ellipsis_mask=0, end_mask=0, new_axis_mask=0, shrink_axis_mask=1](Shape, strided_slice/stack, strided_slice/stack_1, strided_slice/stack_2)' with input shapes: [0], [1], [1], [1] and with computed input tensors: input[1] = <0>, input[2] = <1>, input[3] = <1>.\n",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[11], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m model\u001b[38;5;241m.\u001b[39mcompile(optimizer\u001b[38;5;241m=\u001b[39mkeras\u001b[38;5;241m.\u001b[39moptimizers\u001b[38;5;241m.\u001b[39mAdam(learning_rate\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1e-4\u001b[39m, weight_decay\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1e-5\u001b[39m), loss\u001b[38;5;241m=\u001b[39mkeras\u001b[38;5;241m.\u001b[39mlosses\u001b[38;5;241m.\u001b[39mSparseCategoricalCrossentropy(from_logits\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m), metrics\u001b[38;5;241m=\u001b[39m[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124maccuracy\u001b[39m\u001b[38;5;124m\"\u001b[39m])\n\u001b[0;32m----> 2\u001b[0m \u001b[43mmodel\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtrain_gen\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mepochs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m10\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mvalidation_data\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mval_gen\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mvalidation_steps\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mlen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mval_gen\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/Developer/CS-342-Neural-Networks/venv/lib/python3.8/site-packages/keras/utils/traceback_utils.py:70\u001b[0m, in \u001b[0;36mfilter_traceback.<locals>.error_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     67\u001b[0m     filtered_tb \u001b[38;5;241m=\u001b[39m _process_traceback_frames(e\u001b[38;5;241m.\u001b[39m__traceback__)\n\u001b[1;32m     68\u001b[0m     \u001b[38;5;66;03m# To get the full stack trace, call:\u001b[39;00m\n\u001b[1;32m     69\u001b[0m     \u001b[38;5;66;03m# `tf.debugging.disable_traceback_filtering()`\u001b[39;00m\n\u001b[0;32m---> 70\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m e\u001b[38;5;241m.\u001b[39mwith_traceback(filtered_tb) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m     71\u001b[0m \u001b[38;5;28;01mfinally\u001b[39;00m:\n\u001b[1;32m     72\u001b[0m     \u001b[38;5;28;01mdel\u001b[39;00m filtered_tb\n",
      "File \u001b[0;32m/tmp/__autograph_generated_filedpf030j0.py:15\u001b[0m, in \u001b[0;36mouter_factory.<locals>.inner_factory.<locals>.tf__train_function\u001b[0;34m(iterator)\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[1;32m     14\u001b[0m     do_return \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m\n\u001b[0;32m---> 15\u001b[0m     retval_ \u001b[38;5;241m=\u001b[39m ag__\u001b[38;5;241m.\u001b[39mconverted_call(ag__\u001b[38;5;241m.\u001b[39mld(step_function), (ag__\u001b[38;5;241m.\u001b[39mld(\u001b[38;5;28mself\u001b[39m), ag__\u001b[38;5;241m.\u001b[39mld(iterator)), \u001b[38;5;28;01mNone\u001b[39;00m, fscope)\n\u001b[1;32m     16\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m:\n\u001b[1;32m     17\u001b[0m     do_return \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m\n",
      "\u001b[0;31mValueError\u001b[0m: in user code:\n\n    File \"/home/eminarslan/Developer/CS-342-Neural-Networks/venv/lib/python3.8/site-packages/keras/engine/training.py\", line 1284, in train_function  *\n        return step_function(self, iterator)\n    File \"/home/eminarslan/Developer/CS-342-Neural-Networks/venv/lib/python3.8/site-packages/keras/engine/training.py\", line 1268, in step_function  **\n        outputs = model.distribute_strategy.run(run_step, args=(data,))\n    File \"/home/eminarslan/Developer/CS-342-Neural-Networks/venv/lib/python3.8/site-packages/keras/engine/training.py\", line 1249, in run_step  **\n        outputs = model.train_step(data)\n    File \"/home/eminarslan/Developer/CS-342-Neural-Networks/venv/lib/python3.8/site-packages/keras/engine/training.py\", line 1051, in train_step\n        loss = self.compute_loss(x, y, y_pred, sample_weight)\n    File \"/home/eminarslan/Developer/CS-342-Neural-Networks/venv/lib/python3.8/site-packages/keras/engine/training.py\", line 1109, in compute_loss\n        return self.compiled_loss(\n    File \"/home/eminarslan/Developer/CS-342-Neural-Networks/venv/lib/python3.8/site-packages/keras/engine/compile_utils.py\", line 279, in __call__\n        batch_dim = tf.shape(y_t)[0]\n\n    ValueError: slice index 0 of dimension 0 out of bounds. for '{{node strided_slice}} = StridedSlice[Index=DT_INT32, T=DT_INT32, begin_mask=0, ellipsis_mask=0, end_mask=0, new_axis_mask=0, shrink_axis_mask=1](Shape, strided_slice/stack, strided_slice/stack_1, strided_slice/stack_2)' with input shapes: [0], [1], [1], [1] and with computed input tensors: input[1] = <0>, input[2] = <1>, input[3] = <1>.\n"
     ]
    }
   ],
   "source": [
    "model.compile(optimizer=keras.optimizers.Adam(learning_rate=1e-4, weight_decay=1e-5), loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True), metrics=[\"accuracy\"])\n",
    "model.fit(train_gen, epochs=10, validation_data=val_gen, validation_steps=len(val_gen))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e5a7495d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Start of epoch 0\n",
      "Training loss: 1.414419412612915\n",
      "Training loss: 0.8251956105232239\n",
      "\n",
      "Start of epoch 1\n",
      "Training loss: 0.7207200527191162\n",
      "Training loss: 0.7314937114715576\n",
      "\n",
      "Start of epoch 2\n",
      "Training loss: 0.7310189008712769\n",
      "Training loss: 0.7190231680870056\n",
      "\n",
      "Start of epoch 3\n",
      "Training loss: 0.6789534091949463\n",
      "Training loss: 0.7083361744880676\n",
      "\n",
      "Start of epoch 4\n",
      "Training loss: 0.7353107929229736\n",
      "Training loss: 0.6782160401344299\n",
      "\n",
      "Start of epoch 5\n",
      "Training loss: 0.716867983341217\n",
      "Training loss: 0.6606179475784302\n",
      "\n",
      "Start of epoch 6\n",
      "Training loss: 0.6923422813415527\n",
      "Training loss: 0.6726784706115723\n",
      "\n",
      "Start of epoch 7\n",
      "Training loss: 0.679427981376648\n",
      "Training loss: 0.6669270992279053\n",
      "\n",
      "Start of epoch 8\n",
      "Training loss: 0.6856671571731567\n",
      "Training loss: 0.6754216551780701\n",
      "\n",
      "Start of epoch 9\n",
      "Training loss: 0.6746021509170532\n",
      "Training loss: 0.6504418849945068\n"
     ]
    }
   ],
   "source": [
    "epochs = 10\n",
    "criterion = keras.losses.SparseCategoricalCrossentropy(from_logits=True)\n",
    "optimizer = keras.optimizers.Adam(learning_rate=1e-4, weight_decay=1e-5)\n",
    "\n",
    "for epoch in range(epochs):\n",
    "    print(f\"\\nStart of epoch {epoch}\")\n",
    "    for step, (inputs, labels) in enumerate(train_gen):\n",
    "        with tf.GradientTape() as tape:\n",
    "            logits = model(inputs, training=True)\n",
    "            loss = criterion(labels, logits)\n",
    "        grads = tape.gradient(loss, model.trainable_weights)\n",
    "        optimizer.apply_gradients(zip(grads, model.trainable_weights))\n",
    "        if not step % 500:\n",
    "            print(f\"Training loss: {float(loss)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e0e42134",
   "metadata": {},
   "outputs": [],
   "source": [
    "model2 = model"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
